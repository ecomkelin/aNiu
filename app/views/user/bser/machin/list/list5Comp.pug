input(type="hidden", name="obj[machinId]", value=machin._id)
input(type="hidden", name="obj[macfirId]", value=macfir._id)
- let k = 0, totquot = 0,  totship = 0;
- let ztotquots = new Array();
- let ztotships = new Array();
each macsec in macfir.macsecs
	- let pdsec = macsec.pdsec;
	- let color = pdsec.color;
	if color.length > 10
		- color = color.substr(0, 8)+' ..';
	tr
		th.bg-light #{color}
		- let ctotquot = 0;
		each size in machin.sizes
			-let quot = '';
			each macthd in macsec.macthds
				if macthd.size == size
					- quot = macthd.quot;
					if isNaN(ztotquots[size])
						- ztotquots[size] = quot;
					else
						- ztotquots[size] += quot;
					- ctotquot += quot;
					- totquot += quot;
					- break;
			td #{quot}
		td.text-success #{ctotquot}
		td.bg-secondary
		th.bg-light #{color}
		- let ctotship = 0;
		each size in machin.sizes
			-let ship = '';
			-let quot = '';
			-let macthdId = '';
			each macthd in macsec.macthds
				if macthd.size == size
					- macthdId = macthd._id;
					- ship = parseInt(macthd.ship);
					if isNaN(ztotships[size])
						- ztotships[size] = ship;
					else
						- ztotships[size] += ship;
					- ctotship += ship;
					- totship += ship;
					- quot = parseInt(macthd.quot);
					- break;
			td 
				if macthdId
					- k++;
					-let shiping = quot - ship;

					if shiping > 0
						-a;
						input.iptsty2.shiping(id="shiping-"+macthdId, type="number", name="obj[thds]["+k+"][shiping]", value=shiping)
						input(id="stock-"+macthdId, type="hidden", value=stock)
						input(type="hidden", name="obj[thds]["+k+"][macthdId]", value=macthdId)
						input(type="hidden", name="obj[thds]["+k+"][shiped]", value=ship)
					else
						span.text-info #{ship}
		td.text-success #{ctotship}
tr
	td
	each size in machin.sizes
		-a;
		td.text-success #{ztotquots[size]}
	td.text-success: h4 #{totquot}
	td.bg-secondary
	td
	each size in machin.sizes
		-a;
		td.text-success #{ztotships[size]}
	td.text-success: h4 #{totship}